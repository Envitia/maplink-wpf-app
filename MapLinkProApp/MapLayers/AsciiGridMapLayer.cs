using Envitia.MapLink;
using Envitia.MapLink.Grids;
using Envitia.MapLink.Grids.Ascii;
using Envitia.MapLink.Terrain;

namespace MapLinkProApp.MapLayers
{
  /// <summary>
  /// A map layer that visualises a map generated by reading ASCII Grid Files
  /// </summary>
  public class AsciiGridMapLayer : MapLayer
  {
    private TSLNCustomDataLayer DataLayer { get; set; }
    private DataGrid DataGrid { get; set; }

    public override void ConfigureMapLayer(TSLN2DDrawingSurface surface, bool visible, double depth)
    {
      surface.setDataLayerProps(Identifier(), Envitia.MapLink.TSLNPropertyEnum.TSLNPropertyVisible, visible ? 1 : 0);
      surface.setDataLayerProps(Identifier(), Envitia.MapLink.TSLNPropertyEnum.TSLNPropertyDetect, visible ? 1 : 0);

      surface.setDataLayerProps(Identifier(), Envitia.MapLink.TSLNPropertyEnum.TSLNPropertyTransparency, IsFoundationLayer ? 255 : Opacity);
    }

    public override DataGrid GetDataGrid()
    {
      return DataGrid;
    }

    public override TSLNDataLayer GetDataLayer()
    {
      if (DataLayer != null)
        return DataLayer;

      string errors = "";

      AsciiGridDataset dataset = new AsciiGridDataset();
      GridLayer gridLayer;
      if (!dataset.Load(DataLocation))
      {
        DataLayer = null;
        errors += "Failed to load data: " + Property;
      }
      else
      {
        DataGrid = dataset.DataGrid;
        gridLayer = new GridLayer { Grid = DataGrid };
        DataLayer = gridLayer.DataLayer;
      }

      if (errors.Length > 0)
      {
        System.Windows.MessageBox.Show(errors);
      }

      return DataLayer;
    }

    public override TSLNTerrainDatabase GetTerrainDatabase()
    {
      return null;
    }
  }
}
